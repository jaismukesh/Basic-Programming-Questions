#include <iostream>
using namespace std;

class cirQueue{
public:
int *arr;
int size;
int front;
int rear;

cirQueue(int size){
  this->size=size;
  arr=new int[size];
  front=-1;
  rear=-1;
}

void push(int data){
 //overflow
if(front==0 && rear==size-1|| rear==front-1){
  cout<<"queue is full cannot insert"<<endl;
}
//single element
  else if(front==-1 && rear==-1){
    front=rear=0;
    arr[rear]=data;
    rear++;
  }
  //circular
  else if(rear==size-1 && front!=0){
    rear=0;
    arr[rear]=data;
  }
  //normal condition
  else{
    arr[rear]=data;
    rear++;
  }
}
void pop(){
  if(front==-1){
    cout<<"queue is empty cannot pop"<<endl;
  }
  else if(front==rear){
      arr[front]=-1;
      front=-1;
      rear=-1;
    }
  
  else if(front==size-1){
    front=0;
  }
  else{
    front++;
  }
}
int getfront(){
  if(front==-1){
    cout<<"queue is empty"<<endl;
    return -1;
  }
  else{
    return arr[front];
  }
}

bool isempty(){
  if(front==rear){
    return true;
  }
  else{
    return false;
  }
}
int getsize(){
  return rear-front;
}
};
int main() {
 cirQueue q(10);
  q.push(50);
  q.push(20);
  q.push(15);
cout<<"size of queue is:"<<q.getsize()<<endl;
  cout<<"front element is:"<<q.getfront()<<endl;
  q.pop();
  cout<<"size of queue is:"<<q.getsize()<<endl;
 
}
